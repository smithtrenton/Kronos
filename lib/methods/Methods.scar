unit kronos.lib.methods.Methods;

(*
Methods
=======

Contains all of the basic functions and procedures that are common throughout
the include and do not necessarily have a particular category.

*)

interface

  uses
    kronos.smart.SMART,
    kronos.lib.core.Hooks,
    kronos.lib.core.Globals,
    Math, Types;

  function GetMyPos: TTile;
  function GetMyLocPos: TTile;
  function GetMyPlane: Integer;
  function GetSetting(Setting: Integer): Integer;

  function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;
  function InStrArray(StrArray: TStrArray; Str: String): Boolean;
  procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
  procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;
  function Distance(X1, Y1, X2, Y2: extended): extended; overload;
  function Distance(P1, P2: TPoint): extended; overload;
  function TPAFromBox(const Box : TBox) : TPointArray;
  function ArcTan2(y,x : extended) : extended;
  function TPAToStr(TPA: TPointArray): String;



implementation

(*
GetMyPos
~~~~~~~~

.. code-block:: pascal

    function GetMyPos: TTile;

Returns your current tile.

.. note::

  by Benland100

*)
function GetMyPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := SmartGetFieldInt(0, hook_static_BaseX) + SmartGetFieldInt(Me, hook_animable_PixelX) div 512;
  Result.y := SmartGetFieldInt(0, hook_static_BaseY) + SmartGetFieldInt(Me, hook_animable_PixelY) div 512;
  SmartFreeObject(Me);
end;

(*
GetMyLocPos
~~~~~~~~~~~

.. code-block:: pascal

    function GetMyLocPos: TTile;

Returns your local position.

.. note::

  by Benland100

*)
function GetMyLocPos: TTile;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result.x := (SmartGetFieldInt(Me, hook_animable_PixelX) - SmartGetFieldInt(0, hook_static_BaseX)) div 512;
  Result.y := (SmartGetFieldInt(Me, hook_animable_PixelY) - SmartGetFieldInt(0, hook_static_BaseY)) div 512;
  SmartFreeObject(Me);
end;

(*
GetMyPlane
~~~~~~~~~~

.. code-block:: pascal

    function GetMyPlane: Integer;

Returns your current plane. (ground level, underground, above ground, etc.)

.. note::

  by Benland100

*)
function GetMyPlane: Integer;
var
  Me: Integer;
begin
  Me := SmartGetFieldObject(0, hook_static_MyPlayer);
  Result := SmartGetFieldByte(Me, hook_animable_Plane);
  SmartFreeObject(Me);
end;

(*
R_GetSettingArray
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSettingArray: TIntegerArray;

Retrives the Settings array from the client.

.. note::

  by Drags111

*)
function GetSettingArray: TIntArray;
var
  SettingArray: Integer;
begin
  SetLength(Result, 0);
  try
    SettingArray := SmartGetFieldObject(0, hook_static_GetSettings);
    Result := SmartGetFieldArrayInt(SettingArray, hook_SettingArray_GetData);
  finally
    SmartFreeOBject(SettingArray);
  end;
end;

(*
R_GetSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function R_GetSetting(Setting: Integer): Integer;

Gets the setting value at the specified index.

.. note::

  by Drags111

*)
function GetSetting(Setting: Integer): Integer;
var
  SA: TIntArray;
begin
  SA := GetSettingArray;
  if(Setting < Length(SA)) and (Setting >= 0)then
    Result := SA[Setting]
  else
  begin
    Println('Incorrect setting index passed to GetSetting');
    Result := -1;
  end;
end;

(*
InIntArray
~~~~~~~~~~

.. code-block:: pascal

    function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;

Returns true if the Int is found in the IntArray.

.. note::

  by Drags111

*)
function InIntArray(IntArray: TIntArray; Int: Integer): Boolean;
var
  I, H: Integer;
begin
  Result := False;
  H := High(IntArray);
  for I := 0 to H do
    if(IntArray[I] = Int)then
    begin
      Result := True;
      Exit;
    end;
end;

(*
InStringArray
~~~~~~~~~~~~~

.. code-block:: pascal

    function InStringArray(StringArray: TStrArray; Str: String): Boolean;

Returns true if the Str is found in the StringArray.

.. note::

  by Drags111

*)
function InStrArray(StrArray: TStrArray; Str: String): Boolean;
var
  I, H: Integer;
begin
  Result := False;
  H := High(StrArray);
  for I := 0 to H do
    if(StrArray[I] = Str)then
    begin
      Result := True;
      Exit;
    end;
end;

(*
QuickTPASort
~~~~~~~~~~~~

.. code-block:: pascal

    procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);

.. note::

  by Wizzup

*)
procedure QuickTPASort(var A: TIntArray; var B: TPointArray; iLo, iHi: Integer; SortUp: Boolean);
var
  Lo, Hi, Mid, T: Integer;
  TP: TPoint;
begin
  if (Length(A) <> Length(B)) then Exit;
  Lo := iLo;
  Hi := iHi;
  Mid := A[(Lo + Hi) shr 1];
  repeat
    if SortUp then
    begin
      while (A[Lo] < Mid) do Inc(Lo);
      while (A[Hi] > Mid) do Dec(Hi);
    end else
    begin
      while (A[Lo] > Mid) do Inc(Lo);
      while (A[Hi] < Mid) do Dec(Hi);
    end;
    if (Lo <= Hi) then
    begin
      T := A[Lo];
      A[Lo] := A[Hi];
      A[Hi] := T;
      TP := B[Lo];
      B[Lo] := B[Hi];
      B[Hi] := TP;
      Inc(Lo);
      Dec(Hi);
    end;
  until Lo > Hi;
  if (Hi > iLo) then QuickTPASort(A, B, iLo, Hi, SortUp);
  if (Lo < iHi) then QuickTPASort(A, B, Lo, iHi, SortUp);
end;

(*
SortTPAFrom
~~~~~~~~~~~

.. code-block:: pascal

    procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;

Sorts a TPA by distance from the point From.

.. note::

  by Wizzup

*)
procedure SortTPAFrom(var a: TPointArray; const From: TPoint); stdcall;
var
   i, l: Integer;
   DistArr: TIntArray;
begin
  l := High(a);
  if (l < 0) then Exit;
  SetLength(DistArr, l + 1);
  for i := 0 to l do
    DistArr[i] := Math.Round(Math.Sqr(From.x - a[i].x) + Sqr(From.y - a[i].y));
  QuickTPASort(DistArr, a, 0, l, True);
end;

(*
Distance
~~~~~~~~~~~

.. code-block:: pascal

    function Distance(X1, Y1, X2, Y2: Extended): Extended; overload;

Calculates the distance between (X1, Y1) and (X2, Y2).

.. note::

  by mormonman

*)
function Distance(X1, Y1, X2, Y2: Extended): Extended; overload;
begin
  Result := Sqrt(Sqr(X2 - X1) + Sqr(Y2 - Y1));
end;

(*
Distance
~~~~~~~~~~~

.. code-block:: pascal

    function Distance(P1, P2: TPoint): Extended; overload;

Calculates the distance between P1 and P2.

.. note::

  by mormonman

*)
function Distance(P1, P2: TPoint): Extended; overload;
begin
  Result := Distance(P1.x, P1.y, P2.x, P2.y);
end;

(*
TPAFromBox
~~~~~~~~~~~

.. code-block:: pascal

    procedure TPAFromBox(const Box : TBox) : TPointArray;

Creates a TPA from the Box.

.. note::

  by Wizzup

*)
function TPAFromBox(const Box : TBox) : TPointArray;
var
  x, y: integer;
  l : integer;
begin
  SetLength(Result, (Box.x2 - Box.x1 + 1) * (Box.y2 - Box.y1 + 1));
  l := 0;
  For x := box.x1 to Box.x2 do
    for y := box.y1 to box.y2 do
    begin
      Result[l].x := x;
      Result[l].y := y;
      inc(l);
    end;
end;

//from FPC source
function ArcTan2(y,x : extended) : extended;
  begin
    if (x=0) then
      begin
        if y=0 then
          Result:=0.0
        else if y>0 then
          Result:=pi/2
        else if y<0 then
          Result:=-pi/2;
      end
    else
      Result:=ArcTan(y/x);
    if x<0.0 then
      Result+=pi;
    if Result>pi then
      Result:=Result-2*pi;
  end;

function TPAToStr(TPA: TPointArray): String;
var
  i: Integer;
begin
  Result := '[';
  if Length(TPA) > 0 then
    for i := 0 to High(TPA) do
      if i <> High(TPA) then
        Result += ToStr(TPA[i]) + ', '
      else
        Result += ToStr(TPA[i]);
  Result += ']';
end;

end.